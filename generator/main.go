// +build generate

package main

import (
	"fmt"
	"net/http"
	"os"
	"path"
	"runtime"
	"sort"
	"strings"

	. "github.com/dave/jennifer/jen"
	"golang.org/x/net/html"
)

const (
	RC_URL = "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/regions-certs.html"
)

func main() {
	tempDir, err := os.MkdirTemp("", "aws-region-certs-generator")
	if err != nil {
		panic(err)
	}
	defer os.RemoveAll(tempDir)

	_, ourFile, _, _ := runtime.Caller(0)
        parentDir := path.Join(path.Dir(ourFile), "..")

	f, err := os.Create(path.Join(parentDir, "regioncert_gen.go"))
	if err != nil {
		panic(err)
	}

	j := NewFile("awsregioncertificates")
	j.HeaderComment("Code generated by robots, DO NOT EDIT.")

	resp, err := http.Get(RC_URL)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		panic(fmt.Sprintf("bad http status %d", resp.StatusCode))
	}

	var region string
	var wantText bool
	regionCertMap := make(map[string]string)
	tokenizer := html.NewTokenizer(resp.Body)
	for {
		tt:= tokenizer.Next()
		if tt == html.ErrorToken {
			break
		}
		if tt == html.StartTagToken {
			token := tokenizer.Token()
			if token.Data == "awsui-expandable-section" {
				for _, attr := range token.Attr {
					if attr.Key == "id" {
						region = strings.TrimSuffix(attr.Val, "-cert")
						break
					}
				}
			}
			if token.Data == "dd" {
				for _, attr := range token.Attr {
					if attr.Key == "tab-id" && attr.Val == "rsa" {
						wantText = true
						break
					}
				}
			}
		}
		if tt == html.TextToken && wantText {
			token := tokenizer.Token()
			regionCertMap[region] = strings.ReplaceAll(token.String(), "\t", "")
			wantText = false
		}
	}

	d := make(Dict)
	ops := make([]Code, len(regionCertMap))
	i := 0
	regionList := make([]string, len(regionCertMap))
	for region := range regionCertMap {
		regionList[i] = region
		i++
	}
	sort.Strings(regionList)
	i = 0
	for _, region := range regionList {
		cert := regionCertMap[region]
		constName := strings.Replace(region, "-", "_", -1) + "_cert"
		ops[i] = Id(constName).Op("=").Lit(cert)
		i++
		d[Lit(region)] = Id(constName)
	}
	j.Const().Defs(ops...)

	j.Func().Id("getRegionCertStrings").Params().Map(String()).String().Block(
		Return(Map(String()).String().Values(d)),
	)

	fmt.Fprintln(f, fmt.Sprintf("%#v", j))

	err = f.Close()
	if err != nil {
		panic(err)
	}
}
